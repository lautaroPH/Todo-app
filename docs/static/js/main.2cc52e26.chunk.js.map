{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/TodoForm.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","todo","todoDelete","todoToogleCompleted","setTodoEdit","className","title","onClick","id","completed","description","TodoList","todos","length","map","initialFormValues","TodoForm","todoAdd","todoEdit","todoUpdate","useState","formValues","setFormValues","error","setError","successMessage","setsuccessMessage","useEffect","handleInputChange","e","changeFormValues","target","name","value","onSubmit","preventDefault","trim","setTimeout","type","placeholder","onChange","initialTodos","localTodos","JSON","parse","localStorage","getItem","App","setTodos","setItem","stringify","todoId","changeTodos","filter","Date","now","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cc52e26.chunk.js","sourcesContent":["import React from 'react'\n\n\n\nconst Todo = ({ todo, todoDelete, todoToogleCompleted, setTodoEdit }) => {\n\n\n    return (\n        <div className=\"card mt-2\">\n            <div className=\"card-body\">\n                <h3 className=\"card-title text-right\">\n                    {todo.title}\n                    <button\n                        onClick={() => todoToogleCompleted(todo.id)}\n                        className={`btn btn-sm ${todo.completed ? 'btn-outline-success' : 'btn-success'} ml-2`}\n                    >\n                        {todo.completed ? 'Terminado' : 'Terminar'}\n                    </button>\n                </h3>\n                <p className=\"card-text text-right\">\n                    {todo.description}\n                </p>\n                <hr></hr>\n                <div className=\"d-flex justify-content-end\">\n                    <button\n                        onClick={() => setTodoEdit(todo)}\n                        className=\"btn btn-sm btn-outline-primary mr-2\"\n                    >\n                        Editar\n                    </button>\n                    <button\n                        onClick={() => todoDelete(todo.id)}\n                        className=\"btn btn-sm btn-outline-danger\"\n                    >\n                        Eliminar\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\n\n\n\n\n\n\nconst TodoList = ({ todos, todoDelete, todoToogleCompleted, setTodoEdit }) => {\n\n\n    return (\n        <div>\n            <h2 className=\"text-right display-4\">Soy TodoList</h2>\n\n            {todos.length === 0\n                ? (\n                    <div className=\"alert alert-primary\">\n                        No hay tareasm por favor agraga una tarea\n                    </div>\n                )\n                : (\n                    todos.map(todo => (\n                        <Todo\n                            todo={todo}\n                            key={todo.id}\n                            todoDelete={todoDelete}\n                            todoToogleCompleted={todoToogleCompleted}\n                            setTodoEdit={setTodoEdit}\n                        >\n                        </Todo>\n                    ))\n                )\n\n            }\n\n        </div>\n    );\n}\n\nexport default TodoList;","import React, { useState, useEffect } from 'react';\n\nconst initialFormValues = {\n    title: '',\n    description: ''\n}\n\nconst TodoForm = ({ todoAdd, todoEdit, todoUpdate, setTodoEdit }) => {\n\n\n    const [formValues, setFormValues] = useState(initialFormValues);\n    const { title, description } = formValues;\n    const [error, setError] = useState(null);\n    const [successMessage, setsuccessMessage] = useState(null);\n\n    useEffect(() => {\n\n        if (todoEdit) {\n            setFormValues(todoEdit);\n        } else {\n            setFormValues(initialFormValues);\n        }\n\n    }, [todoEdit]);\n\n    const handleInputChange = (e) => {\n\n        const changeFormValues = {\n            ...formValues,\n            [e.target.name]: e.target.value\n        }\n\n        setFormValues(changeFormValues);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (title.trim() === '') {\n            setError('Debes indicar un titulo');\n            return;\n        }\n\n        if (description.trim() === '') {\n            setError('Debes indicar una descripcion');\n            return;\n        }\n\n        if (todoEdit) {\n            todoUpdate(formValues);\n            setsuccessMessage('Actualizado con exito');\n        } else {\n            todoAdd(formValues);\n            setsuccessMessage('Agregado con exito');\n            setFormValues(initialFormValues);\n        }\n\n\n        setTimeout(() => {\n            setsuccessMessage(null);\n        }, 2000);\n        setError(null);\n    }\n\n    return (\n        <div>\n            <h2 className=\"text-center display-4\">{todoEdit ? 'Editar tarea' : 'Nueva tarea'}</h2>\n            {todoEdit &&\n                <button\n                    onClick={() => setTodoEdit(null)}\n                    className=\"btn btn-sm btn-warning mb-2\">\n                    Cancelar edicion\n                </button>\n            }\n\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    placeholder=\"titulo\"\n                    className=\"form-control\"\n                    value={title}\n                    name=\"title\"\n                    onChange={handleInputChange}\n                ></input>\n                <textarea\n                    placeholder=\"descripcion\"\n                    className=\"form-control mt-2\"\n                    value={description}\n                    name=\"description\"\n                    onChange={handleInputChange}\n                ></textarea>\n                <button\n                    className=\"btn btn-primary btn-block mt-2\"\n                >\n                    {todoEdit ? 'Actualizar tarea' : 'Agregar tarea'}\n                </button>\n            </form>\n            {error && (\n                <div className=\"alert alert-danger mt-2\">\n                    {error}\n                </div>\n            )\n\n            }\n\n            {successMessage && (\n                <div className=\"alert alert-success mt-2\">\n                    {successMessage}\n                </div>\n            )\n\n            }\n\n        </div>\n    );\n}\n\nexport default TodoForm;","import './App.css';\nimport TodoList from './components/TodoList';\nimport TodoForm from './components/TodoForm';\nimport React, { useEffect, useState } from 'react';\n\nconst initialTodos = [\n  {\n    id: 1,\n    title: \"todo #1\",\n    description: 'Desc del Todo #1',\n    completed: false\n  },\n  {\n    id: 2,\n    title: \"todo #2\",\n    description: 'Desc del Todo #2',\n    completed: true\n  }\n\n];\n\nconst localTodos = JSON.parse(localStorage.getItem('todos'));\n\nconst App = () => {\n\n  const [todos, setTodos] = useState(localTodos || initialTodos);\n  const [todoEdit, setTodoEdit] = useState(null)\n\n  useEffect(() => {\n\n    localStorage.setItem('todos', JSON.stringify(todos));\n\n  }, [todos])\n\n  const todoDelete = (todoId) => {\n\n    if (todoEdit && todoId === todoEdit.id) {\n      setTodoEdit(null);\n    }\n\n    const changeTodos = todos.filter(todo => todo.id !== todoId);\n\n    setTodos(changeTodos);\n  }\n\n  const todoToogleCompleted = (todoId) => {\n\n    // const changeTodos = todos.map(todo => {\n\n    //   const todoEdit = {\n    //     ...todo,\n    //     completed: !todo.completed\n    //   }\n    //   if (todo.id === todoId) {\n    //     return todoEdit\n    //   } else {\n    //     return todo\n    //   }\n    // })\n\n    // const changeTodos = todos.map(todo => (\n    //   todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\n    // ))\n\n    const changeTodos = todos.map(todo => todo.id === todoId ? { ...todo, completed: !todo.completed } : todo);\n\n    setTodos(changeTodos);\n  }\n\n  const todoAdd = (todo) => {\n\n    const newTodo = {\n      id: Date.now(),\n      ...todo,\n      completed: false\n    }\n\n    const changeTodos = [\n      newTodo,\n      ...todos\n\n    ]\n\n    setTodos(changeTodos);\n  }\n\n  const todoUpdate = (todoEdit) => {\n\n    const changeTodos = todos.map(todo => (\n      todo.id === todoEdit.id\n        ? todoEdit\n        : todo\n    ))\n\n    setTodos(changeTodos);\n  }\n\n  return (\n    <div className=\"container mt-4\">\n      <div className=\"row\">\n        <div className=\"col-8\">\n          <TodoList todos={todos}\n            todoDelete={todoDelete}\n            todoToogleCompleted={todoToogleCompleted}\n            setTodoEdit={setTodoEdit}\n          ></TodoList>\n        </div>\n        <div className=\"col-4\">\n          <TodoForm\n            todoAdd={todoAdd}\n            todoEdit={todoEdit}\n            todoUpdate={todoUpdate}\n            setTodoEdit={setTodoEdit}\n          ></TodoForm>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}